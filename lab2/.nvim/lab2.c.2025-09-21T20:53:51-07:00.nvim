#define _GNU_SOURCE
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
  printf("Enter programs to run.\n");

  char *buff = NULL;
  size_t size = 0;
  bool programRunning = true;
  int status; // child process exiting
  pid_t pid = fork();
  // infinite loop when getting inputs
  while (programRunning) {
    // get usr input... has \n?
    if (getline(&buff, &size, stdin) == -1)
      break;
    // tokenize??
    // *char *input_str = buff;
    // *token = NULL
    //
    // joke extra implementation
    if (strcmp(buff, "joke") == 0)
      printf("hahahahhaha"); // hahahhahahahaahhahahha

    // we fork a new process here
    //
    // we wait for the child to finish below with waitpid
    if (pid < 0) {
      // fork failure
      perror("fork");
      //continue;
    }

    if (pid == 0) {
      // child process.
      // exec will exec once. this kills the program
      execl(buff, buff, (char *)NULL);
      perror("Exec failure");
      exit(1);
    } else {
      // we need to wait for the child to finish
      // so we need to make it wait with waitpid
      waitpid(pid, &status, 0);
    }
  }

  free(buff);
  return 0;
}
